#!/usr/bin/node

var url = require('url');
var path = require('path');
var Renderer = require('../render/render').Renderer;
var Site = require('../publish/site').Site;

if (!String.prototype.startsWith) {
    String.prototype.startsWith = function(searchString, position){
      position = position || 0;
      return this.substr(position, searchString.length) === searchString;
  };
}

function LinkChecker(yamlDir, htmlDir, renderer) {
    Site.call(this, yamlDir, htmlDir, renderer);
    this.brokenLinks = {};
}

LinkChecker.prototype = Object.create(Site.prototype);
LinkChecker.prototype.constructor = LinkChecker;

LinkChecker.prototype.renderItemToFile = function (item, cb) {
    this.item = item;
    var context = {
        rewriteLink: this.rewriteLink.bind(this)
    };
    var html = this.renderer.render(item, context);
    cb();
};

LinkChecker.prototype.rewriteLink = function (href, title, text) {
    var uri = url.parse(href);
    if (uri.host && uri.host.match(/^((www.|stage.)?mygov|beta.gov).scot/)) {
        this.brokenLink(this.item, href, title, text);
    } else if (uri.pathname && uri.pathname.match(/^[A-Z]+-[0-9]+/)) {
        var id = uri.pathname.split(path.sep)[0];
        if (!this.index[id]) {
            this.brokenLink(this.item, href, title, text);
        }
    } else if (!uri.host && uri.pathname && uri.pathname[0] === '/') {
        this.brokenLink(this.item, href, title, text);
    }
};

LinkChecker.prototype.brokenLink = function (item, url, title, text) {
    var ancestor = item.ancestors[1];
    var category = ancestor ? ancestor.title.trim() : 'Unknown';
    var pages = this.brokenLinks[category] || {};
    var links = pages[item.contentItem.title] || [];
    links.push({
        url: url,
        title: title,
        text: text
    });
    this.brokenLinks[category] = pages;
    pages[item.contentItem.title] = links;
}

LinkChecker.prototype.report = function (done) {
    var lastCategory;
    var lastPage;
    var columns = [
        'Category',
        'Page Title',
        'Link Target',
        'Link Text'
    ];
    console.log('"' + columns.join('","') + '"');
    for (var categoryName in this.brokenLinks) {
        var category = this.brokenLinks[categoryName];
        var showCategory = true;
        for (var pageTitle in category) {
            var page = category[pageTitle];
            var showPage = true;
            for (var linkIdx in page) {
                var link = page[linkIdx];
                var csv = '"' + [
                    showCategory ? categoryName : '',
                    showPage ? pageTitle : '',
                    link.url,
                    link.text
                ].join('","') + '"';
                console.log(csv);
                showCategory = false;
                showPage = false;
            }
        }
    }
};

LinkChecker.prototype.build = function (done) {
    var that = this;
    Site.prototype.build.call(this, function (done) {
        that.report(done);
    });
};

var layouts = path.join(process.cwd(), 'resources/templates/_layouts');
var partials = path.join(process.cwd(), 'resources/templates/_partials');
var helpers = path.join(process.cwd(), 'resources/_helpers');
var renderer = new Renderer(layouts, partials, helpers);
var checker = new LinkChecker('out/contentitems', 'out/pages', renderer);
renderer.on('render', null);
checker.build(function() {});
